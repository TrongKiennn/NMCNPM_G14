<!DOCTYPE html>
<html lang="en" class="scroll-smooth font-sans">

<head>
    <link rel="shortcut icon" href="/images/Logo.png" type="image/x-icon">
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>TASTEE Admin</title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Lalezar&display=swap" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Roboto+Condensed:ital,wght@0,100..900;1,100..900&display=swap"
        rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.7.1/css/all.min.css"
        integrity="sha512-5Hs3dF2AEPkpNAR7UiOHba+lRSJNeM2ECkwxUIxC1Q/FLycGTbNapWXB4tP889k5T5Ju8fs4b1P5z/iB4nMfSQ=="
        crossorigin="anonymous" referrerpolicy="no-referrer" />
</head>

<body>
    <div id="main" class="relative">
        <!-- #region Header -->
        <%- include('admin_layouts/admin_mainLayout', { content: locals.body }) %>
            <!-- #endregion Header -->

            <div id="content" class="z-0 absolute w-full font-roboto-condensed bg-content bg-repeat">
                <div class="mt-[100px] flex ml-75p">
                    <div
                        class="js-add h-[50px] w-[170px] text-[25px] bg-[#D9BB1C] font-medium rounded-[20px] text-center leading-[3rem] mr-[65px] cursor-pointer hover:bg-[#D1B31B]">
                        Thêm món
                        <i class="fa-solid fa-circle-plus ml-2"></i>
                    </div>
                </div>

                <div class="grid grid-cols-4 gap-10 px-[50px] py-[70px]">
                    <!-- Dynamically generate menu items -->
                    <% products.forEach(item=> { %>
                        <div class="item bg-white rounded-lg shadow-xl relative group overflow-hidden"
                            data-id="<%= item.product_id %>" data-img="<%= item.product_url %>"
                            data-name="<%= item.name %>" data-description="<%= item.description %>"
                            data-price="<%= item.price %>" data-category="<%= item.category_id %>">
                            <!-- Image -->
                            <div class="image bg-gray-200 h-[150px] w-full rounded-t-lg"
                                style="background-image: url('<%= item.image_url %>'); background-size: cover; background-position: center;">
                                <img src="<%= item.product_url %>" alt="<%= item.name %>"
                                    class="w-full h-full object-cover transition-opacity duration-300"
                                    onerror="this.onerror=null; this.src='/admin/images/default-food.png';" />
                            </div>

                            <!-- Content -->
                            <div class="content p-4">
                                <h3 class="title font-bold text-lg mb-2">
                                    <%= item.name %>
                                </h3>
                                <h4 class="title font-bold text-lg mb-2">
                                    <%= item.price %>
                                </h4>
                                <p class="description text-sm text-gray-600">
                                    <%= item.description %>
                                </p>
                                <% if(item.status==true) { %>
                                    <h4 class="text-green-500 title font-bold text-lg mt-2">Còn món</h4>
                                    <% } else { %>
                                        <h4 class="text-red-500 title font-bold text-lg mt-2">Hết món</h4>
                                        <% } %>
                            </div>
                            <!-- Detail menu -->
                            <div
                                class="detail-menu absolute top-0 left-0 w-full h-full bg-black bg-opacity-75 text-white opacity-0 group-hover:opacity-100 group-hover:rounded-t-lg transition-opacity duration-300 flex flex-col justify-center items-center">
                                <% if (item.status) { %>
                                    <button
                                        class="js-toggle-status bg-yellow-400 px-4 py-2 rounded-md mb-2 hover:opacity-80">Hết
                                        món</button>
                                    <% } else { %>
                                        <button
                                            class="js-toggle-status bg-yellow-400 px-4 py-2 rounded-md mb-2 hover:opacity-80">Còn
                                            món</button>
                                        <% } %>
                                            <button
                                                class="js-delete bg-red-500 px-4 py-2 rounded-md mb-2 hover:opacity-80">Xóa</button>
                                            <button
                                                class="js-edit bg-green-500 px-4 py-2 rounded-md hover:opacity-80">Chỉnh
                                                sửa</button>
                            </div>
                        </div>
                        <% }); %>
                </div>
            </div>
    </div>

    <!-- MODAL Xóa món -->
    <div
        class="modal-delete js-modal-delete z-[3] fixed top-0 right-0 bottom-0 left-0 bg-black/40 items-center justify-center font-roboto-condensed hidden">
        <div class="modal-container js-modal-container bg-white w-[500px] min-h-[165px] rounded-xl animate-modalFadeIn">
            <header class="modal-header text-[25px] font-bold text-center mt-5 mb-5">
                Bạn chắc chắn muốn xóa món chứ?
            </header>

            <div class="mt-9 ml-[4.5rem] mr-[4.5rem] flex justify-between">
                <button
                    class="js-modal-Yes w-[100px] bg-[#984B01] text-[18px] text-white font-bold uppercase border-none p-[1px] cursor-pointer leading-[37px] rounded-2xl hover:opacity-80">
                    Có
                </button>

                <button
                    class="js-modal-No w-[100px] bg-[#984B01] text-[18px] text-white font-bold uppercase border-none cursor-pointer p-[1px] leading-[37px] rounded-2xl hover:opacity-80">
                    Không
                </button>
            </div>
        </div>
    </div>

    <!-- MODAL Thêm món -->
    <div
        class="modal-add js-modal-add z-[3] fixed top-0 right-0 bottom-0 left-0 bg-black/40 flex items-center justify-center font-roboto-condensed hidden">
        <div class="modal-container js-modal-container bg-white w-[900px] min-h-[165px] rounded-xl animate-modalFadeIn">
            <h2 class="text-2xl font-bold pt-4 pb-4 mb-4 text-center bg-[#984B01] rounded-t-xl text-white">Thêm Món</h2>

            <form action="/admin/create" method="POST" class="flex flex-row p-6 gap-6" enctype="multipart/form-data">

                <div id="drop-area"
                    class="w-1/2 h-45 border-dashed border-2 border-gray-400 rounded-lg p-6 text-center flex justify-center items-center flex-1 flex-col">
                    <i class="fa-solid fa-cloud-arrow-up text-3xl text-gray-600"></i>
                    <label for="file-input"
                        class="text-lg text-white cursor-pointer bg-[#984B01] rounded-md pl-3 pr-3 mt-2">
                        Chọn hình ảnh
                    </label>
                    <input class="form-control" name="product_url" type="file" id="file-input" hidden>
                    <p class="text-sm text-gray-600 mt-2">Hoặc kéo thả hình ảnh vào đây</p>
                    <div id="previewContainer"
                        class=" mt-4 border-2 border-dashed border-gray-300 rounded-lg w-full h-48 flex items-center justify-center bg-gray-50">
                        <p class='text-gray-500'>Ảnh xem trước</p>
                    </div>
                </div>

                <div class="space-y-4 flex flex-col flex-2 gap-3 w-1/2">

                    <input name="name" id="name" type="text" placeholder="Tên món"
                        class="w-full border p-2 rounded form-control" required>
                    <textarea name="description" id="description" placeholder="Mô tả"
                        class="w-full border p-2 rounded h-[100px] form-control" required></textarea>
                    <input name="price" id="price" type="number" placeholder="Giá"
                        class="w-full border p-2 rounded form-control" required>
                    <div>
                        <label for="category_id" class="block text-gray-700">Phân loại</label>
                        <select id="category_id" name="category_id" name="category_id"
                            class="form-control w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                            required>
                            <option disabled value="">--- Chọn phân loại ---</option>
                            <option value="1">Burger</option>
                            <option value="2">Pizza</option>
                            <option value="3">Gà rán</option>
                            <option value="4">Đồ ăn nhẹ</option>
                            <option value="5">Đồ uống</option>
                        </select>
                    </div>

                    <div class="flex items-center justify-between">
                        <button no-btn type="button"
                            class="js-modal-Cancel bg-gray-500 text-white px-4 py-2 rounded hover:bg-gray-600">Hủy</button>
                        <button yes-btn type="submit"
                            class="js-modal-Save bg-[#984B01] text-white px-4 py-2 rounded hover:bg-[#733601]">Lưu</button>
                    </div>
                </div>
            </form>
        </div>
        <div id="toast" class="fixed bottom-4 right-4 bg-green-500 text-white px-4 py-2 rounded hidden"></div>
    </div>

    <!-- MODAL Sửa món -->
    <div
        class="modal-edit js-modal-edit z-[3] fixed top-0 right-0 bottom-0 left-0 bg-black/40 flex items-center justify-center font-roboto-condensed hidden">
        <div class="modal-container js-modal-container bg-white w-[900px] min-h-[165px] rounded-xl animate-modalFadeIn">
            <h2 class="text-2xl font-bold pt-4 pb-4 mb-4 text-center bg-[#984B01] rounded-t-xl text-white">Chỉnh sửa món
            </h2>
            <form action="" method="POST" id="editFoodForm" class="flex flex-row p-6 gap-6"
                enctype="multipart/form-data">
                <div id="drop-area-fix"
                    class="w-1/2 h-45 border-dashed border-2 border-gray-400 rounded-lg p-6 text-center flex justify-center items-center flex-1 flex-col">
                    <i class="fa-solid fa-cloud-arrow-up text-3xl text-gray-600"></i>
                    <label for="file-input-fix"
                        class="text-lg text-white cursor-pointer bg-[#984B01] rounded-md pl-3 pr-3 mt-2">
                        Chọn hình ảnh
                    </label>
                    <input class="form-control" type="file" id="file-input-fix" hidden>
                    <p class="text-sm text-gray-600 mt-2">Hoặc kéo thả hình ảnh vào đây</p>
                    <div id="previewContainerFix"
                        class=" mt-4 border-2 border-dashed border-gray-300 rounded-lg w-full h-48 flex items-center justify-center bg-gray-50">
                        <img id="editFoodImage" src="" alt="Hình ảnh món ăn"
                            class="w-full h-full object-cover hidden" />
                        <p class='text-gray-500'>Ảnh xem trước</p>
                    </div>
                </div>

                <div class="space-y-4 flex flex-col flex-2 gap-3 w-1/2">
                    <!-- Tên món -->
                    <div>
                        <label for="editFoodName" class="block text-sm font-medium text-gray-700">Tên món ăn</label>
                        <input type="text" id="editFoodName" name="name" placeholder="Tên món"
                            class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-green-500 focus:border-green-500 form-control"
                            required />
                    </div>
                    <!-- Mô tả -->
                    <div>
                        <label for="editFoodDescription" class="block text-sm font-medium text-gray-700">Mô tả</label>
                        <textarea id="editFoodDescription" name="description" placeholder="Nhập mô tả món ăn"
                            class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-green-500 focus:border-green-500 form-control"
                            required></textarea>
                    </div>
                    <!-- Giá -->
                    <div>
                        <label for="editFoodPrice" class="block text-sm font-medium text-gray-700">Giá (VNĐ)</label>
                        <input type="number" id="editFoodPrice" name="price" placeholder="Nhập giá món ăn"
                            class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-green-500 focus:border-green-500 form-control"
                            required />
                    </div>
                    <div>
                        <label for="editCategory_id" class="block text-sm font-medium text-gray-700">Phân loại</label>
                        <select id="editCategory_id" name="category_id"
                            class="w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 form-control"
                            required>
                            <option disabled value="">--- Chọn phân loại ---</option>
                            <option value="1">Burger</option>
                            <option value="2">Pizza</option>
                            <option value="3">Gà rán</option>
                            <option value="4">Đồ ăn nhẹ</option>
                            <option value="5">Đồ uống</option>
                        </select>
                    </div>

                    <div class="flex items-center justify-between">
                        <button type="button"
                            class="js-modal-edit-Cancel bg-gray-500 text-white px-4 py-2 rounded hover:bg-gray-600">Hủy</button>
                        <button type="submit"
                            class="js-modal-edit-Save bg-[#984B01] text-white px-4 py-2 rounded hover:bg-[#733601]">Lưu</button>
                    </div>
                </div>
            </form>
        </div>
        <div id="toast" class="fixed bottom-4 right-4 bg-green-500 text-white px-4 py-2 rounded hidden"></div>
    </div>

    <!-- Thông báo showToast -->
    <script>
        function showToast(message, type = 'success') {
            const toast = document.getElementById('toast');
            toast.textContent = message;
            toast.className = `fixed bottom-4 right-4 px-4 py-2 rounded ${type === 'success' ? 'bg-green-500' : 'bg-red-500'} text-white`;
            toast.classList.remove('hidden');
            setTimeout(() => {
                toast.classList.add('hidden');
            }, 3000);
        }
    </script>

    <!-- Xóa item -->
    <script>
        const Deletes = document.querySelectorAll('.js-delete')
        const modalDelete = document.querySelector('.js-modal-delete')
        const modalNo = document.querySelector('.js-modal-No')
        const modalYes = document.querySelector('.js-modal-Yes')

        let currentItemToDelete = null; // Biến lưu trữ item đang được chọn để xóa

        function showConfirmDelete() {
            modalDelete.classList.add('flex')
            modalDelete.classList.remove('hidden')
            currentItemToDelete = event.target.closest('.item') // Lưu trữ item cha của nút "Xóa"
        }

        function hideConfirmDelete() {
            modalDelete.classList.remove('flex')
            modalDelete.classList.add('hidden')
            currentItemToDelete = null
        }

        async function deleteItem() {
            if (currentItemToDelete) {
                const itemId = currentItemToDelete.dataset.id; // Lấy ID của item từ thuộc tính data-id
                if (!itemId) {
                    console.error('Không tìm thấy ID của item để xóa');
                    showToast('Không thể xác định món cần xóa!');
                    hideConfirmDelete();
                    return;
                }
                try {
                    // Gửi yêu cầu DELETE tới backend
                    const response = await fetch(`/admin/products/delete`, {
                        method: 'PATCH',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({ id: itemId }), // Gửi ID của item tới backend
                    });

                    if (response.ok) {
                        // Nếu thành công, xóa item khỏi DOM
                        currentItemToDelete.remove();
                        hideConfirmDelete();
                        showToast('Xóa món thành công!');
                        // Redirect after successful deletion
                        window.location.href = result.redirectUrl;
                    } else {
                        showToast('Có lỗi xảy ra khi xóa món!');
                    }
                } catch (error) {
                    console.error('Lỗi khi gửi yêu cầu xóa:', error);
                    showToast('Không thể xóa món, vui lòng thử lại sau!');
                }
            }
        }

        for (const Delete of Deletes) {
            Delete.addEventListener('click', showConfirmDelete)
        }

        modalNo.addEventListener('click', hideConfirmDelete)
        modalYes.addEventListener('click', deleteItem)
    </script>

    <!-- Thêm items -->
    <script>
        const Add = document.querySelector('.js-add')
        const modalAdd = document.querySelector('.js-modal-add')
        const modalCancel = document.querySelector('.js-modal-Cancel')
        const modalSave = document.querySelector('.js-modal-Save')
        const fileInput = document.getElementById('file-input')
        const previewContainer = document.getElementById('previewContainer')
        const dropArea = document.getElementById('drop-area')
        const categorySelect = document.getElementById('category_id')

        Add.addEventListener("click", () => {
            modalAdd.classList.remove("hidden");
        });

        modalCancel.addEventListener("click", () => {
            modalAdd.classList.add("hidden");
            resetForm();
        });

        fileInput.addEventListener("change", function () {
            const file = fileInput.files[0]; // Lấy file được chọn

            if (file) {
                if (!file.type.startsWith("image/")) {
                    showToast("Vui lòng chọn file ảnh!");
                    return;
                }

                const reader = new FileReader();

                // Khi file đã được đọc xong
                reader.onload = function (e) {
                    // Tạo và hiển thị thẻ img
                    const img = document.createElement("img");
                    img.src = e.target.result;
                    img.className = "max-w-full max-h-full object-contain"; // Tailwind: hiển thị vừa vặn khung

                    // Xóa nội dung cũ và thêm ảnh mới
                    previewContainer.innerHTML = "";
                    previewContainer.appendChild(img);
                };

                reader.readAsDataURL(file); // Đọc file dưới dạng Data URL
            } else {
                // Nếu không chọn file, hiển thị lại văn bản mặc định
                previewContainer.innerHTML = "<p class='text-gray-500'>Ảnh xem trước</p>";
            }
        });

        dropArea.addEventListener('dragover', (e) => {
            e.preventDefault();
            dropArea.classList.add('dragging'); // Thêm hiệu ứng kéo
        });

        dropArea.addEventListener('dragenter', () => {
            dropArea.classList.add('dragging');
        });

        dropArea.addEventListener('dragleave', () => {
            dropArea.classList.remove('dragging');
        });

        dropArea.addEventListener('drop', (e) => {
            e.preventDefault();
            dropArea.classList.remove('dragging');

            // Lấy file từ sự kiện drop
            const file = e.dataTransfer.files[0];

            if (file) {
                if (!file.type.startsWith("image/")) {
                    showToast("Vui lòng kéo thả file ảnh hợp lệ!");
                    return;
                }

                const reader = new FileReader();

                // Khi file đã được đọc xong
                reader.onload = function (e) {
                    const img = document.createElement("img");
                    img.src = e.target.result;
                    img.className = "max-w-full max-h-full object-contain"; // Tailwind: ảnh vừa khung

                    // Xóa nội dung cũ và hiển thị ảnh mới
                    previewContainer.innerHTML = "";
                    previewContainer.appendChild(img);
                };

                reader.readAsDataURL(file); // Đọc file dưới dạng Data URL
            } else {
                previewContainer.innerHTML = "<p class='text-gray-500'>Ảnh xem trước</p>";
            }
        });

        modalSave.addEventListener("click", (e) => {
            e.preventDefault();  // Ngăn form gửi thông qua submit mặc định
            const form = document.querySelector("form");
            if (form.checkValidity()) {
                const data = {
                    name: document.getElementById("name").value,
                    description: document.getElementById("description").value,
                    price: document.getElementById("price").value,
                    category_id: document.getElementById("category_id").value,
                    // Chuyển đổi file ảnh thành base64 nếu cần
                    product_url: fileInput.files[0] ? fileInput.files[0] : null,
                };
                saveDish(event, data);  // Gọi hàm saveDish để gửi dữ liệu
            } else {
                e.preventDefault(); // Ngăn form gửi nếu thông tin không hợp lệ
                showToast("Vui lòng nhập thông tin hợp lệ", "error");
                return;
            }
        });

        // Reset modal sau khi thêm món
        function resetForm() {
            document.getElementById("name").value = "";
            document.getElementById("description").value = "";
            document.getElementById("price").value = "";
            previewContainer.innerHTML = "<p class='text-gray-500'>Ảnh xem trước</p>";
        }


        async function saveDish(event, data) {
            try {
                // Tạo một đối tượng FormData để gửi file nếu có
                const formData = new FormData();
                formData.append("name", data.name);
                formData.append("description", data.description);
                formData.append("price", data.price);
                formData.append("category_id", data.category_id);
                if (data.product_url) {
                    formData.append("product_url", data.product_url);  // Thêm file nếu có
                }

                const response = await fetch('/admin/create', {
                    method: 'POST',
                    body: formData,
                });
                const result = await response.json();
                if (result.ok) {
                    // const result = await response.json();
                    showToast("Món ăn đã được lưu!", "success");
                    // console.log(result);
                    resetForm();
                    setTimeout(() => {
                        // window.location.href = "/admin/products";
                        window.location.reload();
                    }, 1000); 
                } else {
                    // throw new Error("Không thể lưu món ăn.");
                    showToast("Không thể tạo món", "error");
                }
            } catch (error) {
                showToast(error.message, "error");
            }
        }
    </script>

    <!-- Sửa items -->
    <script>
        const Edit = document.querySelectorAll('.js-edit')
        const editModal = document.querySelector('.modal-edit')
        const modalEditCancel = document.querySelector('.js-modal-edit-Cancel')
        const modalEditSave = document.querySelector('.js-modal-edit-Save')
        const editFoodForm = document.getElementById('editFoodForm')
        const dropAreaFix = document.getElementById('drop-area-fix')
        const fileInputFix = document.getElementById('file-input-fix');


        // Lấy thông tin điền vào modal
        Edit.forEach((button) => {
            button.addEventListener('click', (e) => {
                const item = e.target.closest('.item');

                // Lấy dữ liệu từ thuộc tính `data-*` của hàng
                const productId = item.getAttribute('data-id');
                const foodImg = item.getAttribute('data-img');
                const foodName = item.getAttribute('data-name');
                const foodDescription = item.getAttribute('data-description');
                const foodPrice = item.getAttribute('data-price');
                const foodCategoryId = item.getAttribute('data-category');

                // Hiển thị hình ảnh trong modal
                const foodImage = document.getElementById('editFoodImage');
                if (foodImg) {
                    foodImage.src = foodImg; // Gán URL ảnh
                    foodImage.classList.remove('hidden'); // Hiển thị ảnh
                    previewContainerFix.innerHTML = "";
                    previewContainerFix.appendChild(foodImage); // Gắn ảnh vào container
                } else {
                    foodImage.classList.add('hidden'); // Ẩn ảnh nếu không có URL
                    previewContainerFix.innerHTML = "<p class='text-gray-500'>Ảnh xem trước</p>";
                }

                // Điền dữ liệu vào form trong modal
                document.getElementById('editFoodName').value = foodName;
                document.getElementById('editFoodDescription').value = foodDescription;
                document.getElementById('editFoodPrice').value = foodPrice;
                document.getElementById('editCategory_id').value = foodCategoryId;

                // Lưu productId để sử dụng khi gửi request
                window.currentEditingFood = { product_id: productId }; // Lưu ID vào biến toàn cục

                // Hiển thị modal
                editModal.classList.remove('hidden');
            });
        });

        // Lắng nghe sự kiện "Hủy" để đóng modal
        modalEditCancel.addEventListener('click', () => {
            editModal.classList.add('hidden');
        });

        // Khi nhấn Lưu gửi BE
        editFoodForm.addEventListener('submit', (e) => {
            e.preventDefault(); // Ngăn reload trang

            const formData = new FormData();
            formData.append('product_id', window.currentEditingFood.product_id);
            formData.append('name', document.getElementById('editFoodName').value);
            formData.append('description', document.getElementById('editFoodDescription').value);
            formData.append('price', parseInt(document.getElementById('editFoodPrice').value, 10));
            formData.append('category_id', parseInt(document.getElementById('editCategory_id').value, 10));

            // Kiểm tra nếu người dùng đã chọn ảnh mới
            const foodImage = document.getElementById('file-input-fix').files[0];
            if (foodImage) {
                formData.append('product_url', foodImage); // Thêm ảnh vào FormData
            }

            // Gửi yêu cầu PUT đến API để cập nhật món ăn
            fetch('http://localhost:4000/admin/products/update', {
                method: 'PATCH',
                body: formData
            })
                .then(response => {
                    if (response.ok) {
                        showToast('Cập nhật món ăn thành công!');
                        editModal.classList.add('hidden');
                        window.location.reload();
                    } else {
                        showToast('Có lỗi xảy ra khi cập nhật món ăn.');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    showToast('Có lỗi xảy ra khi kết nối đến server.');
                });
        });

        // Xử lý kéo thả file ảnh
        fileInputFix.addEventListener("change", function () {
            const file = fileInputFix.files[0]; // Lấy file được chọn

            if (file) {
                const reader = new FileReader();

                // Khi file đã được đọc xong
                reader.onload = function (e) {
                    // Tạo và hiển thị thẻ img
                    const img = document.createElement("img");
                    img.src = e.target.result;
                    img.className = "max-w-full max-h-full object-contain"; // Tailwind: hiển thị vừa vặn khung

                    // Xóa nội dung cũ và thêm ảnh mới
                    previewContainerFix.innerHTML = "";
                    previewContainerFix.appendChild(img);
                };

                reader.readAsDataURL(file); // Đọc file dưới dạng Data URL
            } else {
                // Nếu không chọn file, hiển thị lại văn bản mặc định
                previewContainerFix.innerHTML = "<p class='text-gray-500'>Ảnh xem trước</p>";
            }
        });

        dropAreaFix.addEventListener('dragover', (e) => {
            e.preventDefault();
            dropAreaFix.classList.add('dragging'); // Thêm hiệu ứng kéo
        });

        dropAreaFix.addEventListener('dragenter', () => {
            dropAreaFix.classList.add('dragging');
        });

        dropAreaFix.addEventListener('dragleave', () => {
            dropAreaFix.classList.remove('dragging');
        });

        dropAreaFix.addEventListener('drop', (e) => {
            e.preventDefault();
            dropAreaFix.classList.remove('dragging');

            // Lấy file từ sự kiện drop
            const file = e.dataTransfer.files[0];

            if (file) {
                if (!file.type.startsWith("image/")) {
                    showToast("Vui lòng kéo thả file ảnh hợp lệ!");
                    return;
                }

                const reader = new FileReader();

                // Khi file đã được đọc xong
                reader.onload = function (e) {
                    const img = document.createElement("img");
                    img.src = e.target.result;
                    img.className = "max-w-full max-h-full object-contain"; // Tailwind: ảnh vừa khung

                    // Xóa nội dung cũ và hiển thị ảnh mới
                    previewContainerFix.innerHTML = "";
                    previewContainerFix.appendChild(img);
                };

                reader.readAsDataURL(file); // Đọc file dưới dạng Data URL
            } else {
                previewContainerFix.innerHTML = "<p class='text-gray-500'>Ảnh xem trước</p>";
            }
        });

    </script>

    <!-- Cập nhật trạng thái product -->
    <script>
        document.querySelectorAll('.js-toggle-status').forEach(button => {
            button.addEventListener('click', async function () {
                // Lấy thông tin sản phẩm từ thuộc tính data
                const parent = this.closest('.item');
                const productId = parent.getAttribute('data-id');
                const isCurrentlyAvailable = this.textContent.trim() === 'Hết món';

                try{
                // Gửi yêu cầu cập nhật trạng thái lên server
                const response = await fetch('/admin/products/change-status', {
                    method: 'PATCH',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({id: productId,  status: isCurrentlyAvailable }) // Đổi trạng thái
                })

                const data = await response.json();
                if (data.success) {
                    // Cập nhật giao diện
                    if (isCurrentlyAvailable) {
                        // Nếu trước đó là "Còn món", đổi thành "Hết món"
                        parent.querySelector('.text-green-500').classList.remove('text-green-500');
                        parent.querySelector('.text-green-500').classList.add('text-red-500');
                        parent.querySelector('.text-red-500').textContent = 'Hết món';
                        this.textContent = 'Còn món'; // Đổi nút trong detail menu
                    } else {
                        // Nếu trước đó là "Hết món", đổi thành "Còn món"
                        parent.querySelector('.text-red-500').classList.remove('text-red-500');
                        parent.querySelector('.text-red-500').classList.add('text-green-500');
                        parent.querySelector('.text-green-500').textContent = 'Còn món';
                        this.textContent = 'Hết món'; // Đổi nút trong detail menu
                    }
                    showToast("Trạng thái đã được cập nhật thành công!", "success");
                }else {
                    showToast("Có lỗi xảy ra khi cập nhật trạng thái.", "success");
                }
                }catch (error) {
                    console.error('Error:', error);
                    showToast("Có lỗi xảy ra khi gửi yêu cầu.", "error");
                }
            });
        });
    </script>
</body>

</html>